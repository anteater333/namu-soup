{"version":3,"file":"static/js/518.48a20db8.chunk.js","mappings":"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","sources":["components/MemoList.js","utils/random.js","utils/timezone.js","../node_modules/react-bootstrap/esm/usePlaceholder.js","../node_modules/react-bootstrap/esm/PlaceholderButton.js","../node_modules/react-bootstrap/esm/Placeholder.js"],"sourcesContent":["import api from \"../api/index\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Placeholder,\r\n} from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport \"moment-timezone\";\r\nimport { getRandomInt, placeholderData } from \"../utils/random\";\r\nimport { UTCStrToKSTStr } from \"../utils/timezone\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\r\n\r\nfunction MemoList() {\r\n  // memos = [ { uuid, context, lastWriter } ], length = 10\r\n  const [memoError, setMemoError] = useState(\"\"); // 메모 작성 중 발생한 에러\r\n  const [memoMode, setMemoMode] = useState(false);\r\n  const [selectedMemo, setSelectedMemo] = useState(\"\");\r\n  const [selectedIdx, setSelectedIdx] = useState(-1);\r\n  const [uuid, setUuid] = useState(\"\");\r\n\r\n  // ref. https://reactrouter.com/en/main/route/route#splats\r\n  const { \"*\": keyword } = useParams();\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const { data, error, isLoading, isError } = useQuery({\r\n    queryKey: [\"memos\"],\r\n    queryFn: () => api.getMemoList(keyword),\r\n  });\r\n\r\n  /** Error handler */\r\n  useEffect(() => {\r\n    if (!isError) return;\r\n\r\n    if (error.response.status === 404) {\r\n      // 404 - 해당 키워드는 현재 서버에 저장된 실검 목록에 존재하지 않음\r\n      // eslint-disable-next-line no-restricted-globals\r\n      location.href = \"/namu-soup\";\r\n    }\r\n  }, [error, isError, keyword]);\r\n\r\n  // Catch ESC for disabling memo mode\r\n  useEffect(() => {\r\n    const keyDownHandler = (event) => {\r\n      if (event.key === \"Escape\") {\r\n        event.preventDefault();\r\n\r\n        setMemoMode(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", keyDownHandler);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", keyDownHandler);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (window.matchMedia(\"(max-width: 800px)\").matches) {\r\n      window.scrollTo(0, memoMode ? document.body.scrollHeight : 0);\r\n    }\r\n  }, [memoMode]);\r\n\r\n  useEffect(() => {\r\n    if (memoMode) inputRef.current.focus();\r\n  }, [memoMode]);\r\n\r\n  const handleMemoButton = (memo, idx) => {\r\n    setUuid(memo.uuid);\r\n    setSelectedMemo(memo.context ? memo.context : \"\");\r\n    setSelectedIdx(idx);\r\n    setMemoError(\"\");\r\n    setMemoMode(!memoMode || idx !== selectedIdx);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const handleSubmitButton = async () => {\r\n    if (!selectedMemo) {\r\n      setMemoError(\"내용을 입력해주세요.\");\r\n      return;\r\n    }\r\n    if (selectedMemo.length > 140) {\r\n      setMemoError(\"내용이 너무 깁니다.\");\r\n      return;\r\n    }\r\n\r\n    const result = await api.writeMemo(\r\n      keyword,\r\n      uuid,\r\n      selectedMemo,\r\n      selectedIdx\r\n    );\r\n\r\n    if (!result[0]) {\r\n      switch (result[1]) {\r\n        case \"notFound\":\r\n          setMemoError(\"\");\r\n          toggleMemoMode();\r\n          break;\r\n        case \"duplicated\":\r\n          setMemoError(\"같은 내용이 존재합니다.\");\r\n          break;\r\n        case \"missed\":\r\n          setMemoError(\"앗\");\r\n          setSelectedMemo(\"\");\r\n          break;\r\n        case \"tooLong\":\r\n          setMemoError(\"내용이 너무 깁니다.\");\r\n          break;\r\n        case \"tooMany\":\r\n          setMemoError(\"잠시만 기다려주세요.\");\r\n          break;\r\n        default:\r\n          setMemoError(\"알 수 없는 오류 발생\");\r\n      }\r\n    } else {\r\n      setMemoError(\"\");\r\n      setMemoMode(false);\r\n    }\r\n\r\n    queryClient.invalidateQueries(\"memos\");\r\n  };\r\n\r\n  const toggleMemoMode = () => {\r\n    setMemoMode(!memoMode);\r\n  };\r\n\r\n  let inputForm;\r\n  if (memoMode) {\r\n    inputForm = (\r\n      <>\r\n        <div className=\"input-form-container\">\r\n          <Form.Control\r\n            ref={inputRef}\r\n            className=\"input-form-control\"\r\n            as=\"input\"\r\n            value={selectedMemo}\r\n            placeholder=\"짧고 간결하게 적어봅시다.\"\r\n            onChange={(e) => {\r\n              setSelectedMemo(e.target.value);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                e.preventDefault();\r\n                handleSubmitButton();\r\n              }\r\n            }}\r\n          ></Form.Control>\r\n          <div className=\"input-button-container\">\r\n            <div className=\"input-error-message\">{memoError}</div>\r\n            <div>{selectedIdx}번 슬롯</div>\r\n            <div className=\"input-length-counter\">\r\n              {selectedMemo.length}/140\r\n            </div>\r\n            <div className=\"input-button-inner-container\">\r\n              <Button className=\"soup-button\" onClick={handleSubmitButton}>\r\n                기록\r\n              </Button>\r\n              <Button\r\n                className=\"soup-button soup-button-reject\"\r\n                onClick={toggleMemoMode}\r\n              >\r\n                닫기\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const listItem = isLoading\r\n    ? placeholderData.map((idx) => {\r\n        const phLen = getRandomInt(1, 10);\r\n        return (\r\n          <ListGroupItem\r\n            key={idx}\r\n            as=\"li\"\r\n            className=\"memo-list-item-container list-item-container\"\r\n          >\r\n            <div className=\"memo-list-item list-item-text fw-bold\">\r\n              <Placeholder animation=\"glow\" xs={9}>\r\n                <Placeholder xs={phLen} bg=\"success\" />\r\n              </Placeholder>\r\n            </div>\r\n            <Button className=\"soup-button list-item-button fw-bold\">\r\n              기록\r\n            </Button>\r\n          </ListGroupItem>\r\n        );\r\n      })\r\n    : data[0].map((memo, idx) => {\r\n        const memoButton = (\r\n          <Button\r\n            className=\"soup-button list-item-button fw-bold\"\r\n            onClick={() => handleMemoButton(memo, idx)}\r\n          >\r\n            기록\r\n          </Button>\r\n        );\r\n        if (memo.context) {\r\n          return (\r\n            <ListGroupItem\r\n              key={memo.uuid}\r\n              as=\"li\"\r\n              className=\"memo-list-item-container list-item-container\"\r\n            >\r\n              <div className=\"memo-list-item list-item-text fw-bold\">\r\n                <div className=\"memo-text\">{memo.context}</div>\r\n                <div className=\"last-writer\">\r\n                  {memo.lastWriter} -{\" \"}\r\n                  {moment(memo.memoAt)\r\n                    .tz(\"Asia/Seoul\")\r\n                    .format(\"yyyy-MM-DD hh:mm:ss z\")}\r\n                </div>\r\n              </div>\r\n              {memoButton}\r\n            </ListGroupItem>\r\n          );\r\n        } else {\r\n          return (\r\n            <ListGroupItem key={idx} as=\"li\" className=\"list-item-container\">\r\n              <div className=\"memo-list-item list-item-text fw-bold\">\r\n                <div className=\"empty-memo-text\">{`< 빈 기록 슬롯 >`}</div>\r\n              </div>\r\n              {memoButton}\r\n            </ListGroupItem>\r\n          );\r\n        }\r\n      });\r\n\r\n  let errorMessage;\r\n  if (error) {\r\n    errorMessage = (\r\n      <div className=\"error-page\">\r\n        <span className=\"error-message\">서버에 접속할 수 없습니다.</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>숲Soup - {keyword}</title>\r\n        <meta\r\n          name=\"description\"\r\n          content={`나무위키 ${keyword}, 숲Soup - 나무위키 실시간 검색어`}\r\n        />\r\n        <meta\r\n          name=\"keywords\"\r\n          content={`namu, wiki, 숲, 나무위키, 인기, 검색어, 실검, 실시간 검색어, 실시간 인기 검색어, 나무위키 실검 알려주는 채널, 실검 채널, ${keyword}`}\r\n        />\r\n        <meta property=\"og:title\" content={`숲Soup - ${keyword}`} />\r\n      </Helmet>\r\n      <div className=\"memo-list-scene\">\r\n        <div></div>\r\n        <div className=\"list-container\">\r\n          {errorMessage}\r\n          <ListGroup as=\"ol\">{listItem}</ListGroup>\r\n          <a\r\n            href={\"https://namu.wiki/w/\" + keyword}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"current-keyword\">{keyword}</div>\r\n          </a>\r\n          <div className=\"crawled-at\">\r\n            기준 시각 : {isLoading ? \"\" : UTCStrToKSTStr(data[1])}\r\n          </div>\r\n        </div>\r\n        <div className=\"memo-list-scene-side\">{inputForm}</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MemoList;\r\n","export function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport const placeholderData = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n","export function UTCStrToKSTStr(UTCStr) {\n  let [YMD, HM, TZ] = [...UTCStr.split(\" \")];\n  HM = HM.split(\":\");\n  HM = `${((parseInt(HM[0]) + 9) % 24).toString().padStart(2, \"0\")}:${HM[1]}`;\n  TZ = \"KST\";\n\n  return [YMD, HM, TZ].join(\" \");\n}\n","import classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { useCol } from './Col';\nexport default function usePlaceholder({\n  animation,\n  bg,\n  bsPrefix,\n  size,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'placeholder');\n  const [{\n    className,\n    ...colProps\n  }] = useCol(props);\n  return { ...colProps,\n    className: classNames(className, animation ? `${bsPrefix}-${animation}` : bsPrefix, size && `${bsPrefix}-${size}`, bg && `bg-${bg}`)\n  };\n}","import * as React from 'react';\nimport Button from './Button';\nimport usePlaceholder from './usePlaceholder';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PlaceholderButton = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Button, { ...placeholderProps,\n    ref: ref,\n    disabled: true,\n    tabIndex: -1\n  });\n});\nPlaceholderButton.displayName = 'PlaceholderButton';\nexport default PlaceholderButton;","import * as React from 'react';\nimport usePlaceholder from './usePlaceholder';\nimport PlaceholderButton from './PlaceholderButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Placeholder = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Component, { ...placeholderProps,\n    ref: ref\n  });\n});\nPlaceholder.displayName = 'Placeholder';\nexport default Object.assign(Placeholder, {\n  Button: PlaceholderButton\n});"],"names":["useState","memoError","setMemoError","memoMode","setMemoMode","selectedMemo","setSelectedMemo","selectedIdx","setSelectedIdx","uuid","setUuid","keyword","useParams","queryClient","useQueryClient","inputRef","useRef","useQuery","queryKey","queryFn","api","data","error","isLoading","isError","useEffect","response","status","location","href","keyDownHandler","event","key","preventDefault","document","addEventListener","removeEventListener","window","matchMedia","matches","scrollTo","body","scrollHeight","current","focus","inputForm","handleSubmitButton","length","result","toggleMemoMode","invalidateQueries","className","ref","as","value","placeholder","onChange","e","target","onKeyDown","onClick","errorMessage","listItem","placeholderData","idx","phLen","getRandomInt","animation","xs","bg","map","memo","memoButton","context","handleMemoButton","lastWriter","moment","memoAt","tz","format","name","content","property","rel","UTCStrToKSTStr","min","max","Math","ceil","floor","random","UTCStr","split","YMD","HM","parseInt","toString","padStart","join","usePlaceholder","bsPrefix","size","props","useBootstrapPrefix","useCol","colProps","classNames","PlaceholderButton","React","placeholderProps","_jsx","Button","disabled","tabIndex","displayName","Placeholder","Component","Object","assign"],"sourceRoot":""}